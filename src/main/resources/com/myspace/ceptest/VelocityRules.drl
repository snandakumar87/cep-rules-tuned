package com.myspace.ceptest;



import fraud.analysis.demo.transaction.*;


declare Transaction @role( event )  @timestamp( txnTS ) end
rule "Velocity Rule 1"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 2)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 1 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 2"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 2)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 2 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 3"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'SG', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 4)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 3 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 4"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 4)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 4 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 5"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 4)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 5 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 6"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'SG', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 6)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 6 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 7"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 6)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 7 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 8"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 6)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 8 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 9"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'SG', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 8)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 9 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 10"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 8)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 10 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 11"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 8)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 11 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 12"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'SG', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 10)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 12 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 13"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 10)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 13 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 14"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 10)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 14 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 15"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'SG', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 12)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 15 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 16"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 12)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 16 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 17"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 12)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 17 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 18"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'SG', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 2)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 18 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 19"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'IN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 2)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 19 for ' + curr.getCardNumber());
  insert(cepFraud);
end
rule "Velocity Rule 20"
when
  curr: CurrentTxn()
  accumulate ($cct: Transaction(txnCntry != 'CN', this.cardNumber == curr.cardNumber) over window:time (1415m) from entry-point Reference;
    $nrOfTransactions : count($cct),
    $list: collectList($cct);
    $nrOfTransactions >= 2)
  $t: Transaction(this.cardNumber == curr.cardNumber) from $list
then
  CEPFraud cepFraud = new CEPFraud();
  cepFraud.setTransactionId(curr.getTransactionId());
  cepFraud.setFraudReason('Flagged tx based on velocity rule 20 for ' + curr.getCardNumber());
  insert(cepFraud);
end

